%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token  UPPER_ID LOWER_ID INTEGER REAL ASSERT PROVE SEMICOLON COMMA DOT EQUAL NOTEQ LT GT LE GE 
        ADD SUBTRACT MULTIPLY HAT DIVIDE IN NOTIN LPAR RPAR LBRACE RBRACE 
        LBRACKET RBRACKET VBAR UNKNOWN;
%%
Program
        : Statements                            { $$ = $1; }
Statements
        : Statement                             { $$ = $1; tree($$); }
        | Statements Statement                  { $$ = $2; tree($$); }
Statement
        : Assertion DOT                         { $$ = $1; }
        | Proof DOT                             { $$ = $1; }
Assertion
        : SetSpecifier ASSERT SetNotation       { $$ = node("ASSERT", cons($1, $3)); }
        | SetSpecifier ASSERT SetExpression     { $$ = node("ASSERT", cons($1, $3)); }
Proof
        : PROVE Conditions                      { $$ = node("PROVE", $2); }
SetNotation
        : LBRACE VBAR Tuple VBAR Conditions RBRACE   { $$ = node("INTENSION", cons($3, $5)); }
        | LBRACE Tuples RBRACE                  { $$ = node("EXTENSION", $2); }
SetExpression
        : SetExpression ADD SetTerm             { $$ = node("+", cons($1, $3)); }
        | SetExpression SUBTRACT SetTerm        { $$ = node("-", cons($1, $3)); }
        | SetTerm                               { $$ = $1; }
SetTerm
        : SetTerm MULTIPLY SetFactor            { $$ = node("*", cons($1, $3)); }
        | SetTerm HAT SetFactor                 { $$ = node("^", cons($1, $3)); }
        | SetFactor                             { $$ = $1; }
SetFactor
        : SetName                               { $$ = $1; }
        | RangeDefinition                       { $$ = $1; }
        | LPAR SetExpression RPAR               { $$ = $2; }
RangeDefinition
        : LBRACKET Expressions RBRACKET         { $$ = node("range", $2); }
Conditions
        : Conjunctive                           { $$ = $1; }
        | Conditions SEMICOLON Conjunctive      { $$ = node("OR", cons($1, $3)); }
Conjunctive
        : Relation                              { $$ = $1; }
        | Conjunctive COMMA Relation            { $$ = node("AND", cons($1, $3)); }
Relation
        : Equation                              { $$ = $1; }
        | Inequation                            { $$ = $1; }
        | Inclusion                             { $$ = $1; }
        | LPAR Conditions RPAR                  { $$ = $2; }
Equation
        : Expression EQUAL Expression           { $$ = node("=", cons($1, $3)); }
        | Expression NOTEQ Expression           { $$ = node("!=", cons($1, $3)); }
Inclusion
        : Tuple IN SetSpecifier                 { $$ = node("~", cons($1, $3)); }
        | Tuple NOTIN SetSpecifier              { $$ = node("!~", cons($1, $3)); }
SetSpecifier
        : SetName                               { $$ = $1; }
        | SetName LPAR Parameters RPAR          { $$ = node("UNIFY", cons($1, $3)); }
Inequation
        : Expression LT Expression              { $$ = node("<", cons($1, $3)); }
        | Expression GT Expression              { $$ = node(">", cons($1, $3)); }
        | Expression LE Expression              { $$ = node("<=", cons($1, $3)); }
        | Expression GE Expression              { $$ = node(">=", cons($1, $3)); }
Tuples
        : Tuple                                 { $$ = $1; }
        | Tuples COMMA Tuple                    { $$ = node(",", cons($1, $3)); }
Tuple
        : Expression                            { $$ = $1; }
        | LPAR Expressions RPAR                 { $$ = $2; }
Expressions
        : Expression                            { $$ = $1; }
        | Expressions COMMA Expression          { $$ = node(",", cons($1, $3)); }
Expression
        : Expression ADD Term                   { $$ = node("+", cons($1, $3)); }
        | Expression SUBTRACT Term              { $$ = node("-", cons($1, $3)); }
        | Term                                  { $$ = $1; }
Term
        : Term MULTIPLY Factor                  { $$ = node("*", cons($1, $3)); }
        | Term DIVIDE Factor                    { $$ = node("/", cons($1, $3)); }
        | Factor                                { $$ = $1; }
Factor
        : Variable                              { $$ = $1; }
        | Subscription                          { $$ = $1; }
        | Constant                              { $$ = $1; }
        | LPAR Expression RPAR                  { $$ = $2; }
SetName
        : UpperIdentifier                       { $$ = $1; }
Variable
        : LowerIdentifier                       { $$ = $1; }
Parameters
        : UpperIdentifier                       { $$ = $1; }
        | Parameters COMMA UpperIdentifier      { $$ = node(",", cons($1, $3)); }
Constant
        : INTEGER                               { $$ = leaf("INTEGER", yytext); }
        | REAL                                  { $$ = leaf("REAL", yytext); }
Subscription
        : LowerIdentifier 
                LBRACKET Expression RBRACKET    { $$ = node("[", cons($1, $3)); }
UpperIdentifier
        : UPPER_ID                              { $$ = leaf("UPPER_ID", yytext); }
LowerIdentifier
        : LOWER_ID                              { $$ = leaf("LOWER_ID", yytext); }
%%
#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
