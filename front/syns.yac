%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token  UPPER_ID LOWER_ID INTEGER REAL STRING
        ASSERT PROVE SEMICOLON COMMA DOT LPAR RPAR LBRACE RBRACE LBRACKET RBRACKET VBAR
        EQUAL NOTEQ LT GT LE GE ADD SUBTRACT MULTIPLY HAT DIVIDE IN NOTIN
        UNKNOWN ;
%%
Program
        : Statements                                            { $$ = $1; }
Statements
        : Statement                                             { $$ = $1; tree($$); }
        | Statements Statement                                  { $$ = $2; tree($$); }
Statement
        : Proof DOT                                             { $$ = $1; }
        | Assertion DOT                                         { $$ = $1; }
Proof
        : PROVE Inclusion                                       { $$ = node("PROVE", $2); }
Assertion
        : SetName ASSERT SetNotation                            { $$ = node("ASSERT", cons($1, $3)); }
SetNotation
        : Intension                                             { $$ = node("INTENSION", $1); }
        | Extention                                             { $$ = node("EXTENSION", $1); }
        | SetExpression                                         { $$ = node("EXPRESSION", $1); }
Intension
        : LBRACE VBAR SetElement VBAR Conditions RBRACE         { $$ = cons($3, $5); }
Extention
        : LBRACE SetElements RBRACE                             { $$ = $2; }
        | LBRACE RBRACE                                         { $$ = cons(NULL, NULL); }
SetElement
        : Value                                                 { $$ = node("SETELEMENT", $1); }
        | Tuple                                                 { $$ = node("SETELEMENT", $1); }
        | TupleElement                                          { $$ = node("SETELEMENT", $1); }
SetElements
        : SetElement                                            { $$ = node("SETELEMENTS", cons($1, NULL)); }
        | SetElements COMMA SetElement                          { $$ = append($1, $3); }
Value
        : Variable                                              { $$ = $1; }
        | Constant                                              { $$ = $1; }
        | SUBTRACT Constant                                     { $$ = node("MINUS", $2); }
        | String                                                { $$ = $1; }
Values
        : Value                                                 { $$ = node("VALUES", cons($1, NULL)); }
        | Values COMMA Value                                    { $$ = append($1, $3); }
Tuple
        : LPAR Values RPAR                                      { $$ = node("TUPLE", $2); }
TupleElement
        : Tuple Indexer                                         { $$ = node("TupleElement", cons($1, $2)); }
        | Variable Indexer                                      { $$ = node("TupleElement", cons($1, $2)); }
Indexer
        : LBRACKET Expression RBRACKET                          { $$ = $2; }
SetExpression
        : SetExpression ADD SetFactor                           { $$ = node("+", cons($1, $3)); }
        | SetExpression SUBTRACT SetFactor                      { $$ = node("-", cons($1, $3)); }
        | SetExpression MULTIPLY SetFactor                      { $$ = node("*", cons($1, $3)); }
        | SetExpression HAT SetFactor                           { $$ = node("^", cons($1, $3)); }
        | SetFactor                                             { $$ = $1; }
SetFactor
        : SetName                                               { $$ = $1; }
        | DomLimmitedSet                                        { $$ = $1; }
        | LPAR SetExpression RPAR                               { $$ = $2; }
SetName
        : UPPER_ID                                              { $$ = leaf("UPPER_ID", yytext); }
DomLimmitedSet
        : SetName DomLimitter                                   { $$ = node("DOMLIMMITEDSET", cons($1, $2)); }
DomLimitter
        : LT Constant COMMA Constant COMMA Constant GT          { $$ = node("DOMAINLIMITER", cons(node("RANGE", cons($2, $4)), $6)); }
Conditions
        : Condition                                             { $$ = $1; }
        | Conditions COMMA Condition                            { $$ = node("AND", cons($1, $3)); }
        | Conditions SEMICOLON Condition                        { $$ = node("OR", cons($1, $3)); }
Condition               
        : Equation                                              { $$ = $1; }
        | Inequation                                            { $$ = $1; }
        | Inclusion                                             { $$ = $1; }
        | LPAR Conditions RPAR                                  { $$ = $2; }
Inclusion               
        : SetElement IN SetNotation                             { $$ = node("~", cons($1, $3)); }
        | SetElement NOTIN SetNotation                          { $$ = node("!~", cons($1, $3)); }
Equation                
        : Expression EQUAL Expression                           { $$ = node("=", cons($1, $3)); }
        | Expression NOTEQ Expression                           { $$ = node("!=", cons($1, $3)); }
Inequation              
        : Expression LT Expression                              { $$ = node("<", cons($1, $3)); }
        | Expression GT Expression                              { $$ = node(">", cons($1, $3)); }
        | Expression LE Expression                              { $$ = node("<=", cons($1, $3)); }
        | Expression GE Expression                              { $$ = node(">=", cons($1, $3)); }
Expression              
        : Expression ADD Term                                   { $$ = node("+", cons($1, $3)); }
        | Expression SUBTRACT Term                              { $$ = node("-", cons($1, $3)); }
        | Term                                                  { $$ = $1; }
Term            
        : Term MULTIPLY Factor                                  { $$ = node("*", cons($1, $3)); }
        | Term DIVIDE Factor                                    { $$ = node("/", cons($1, $3)); }
        | Factor                                                { $$ = $1; }
Factor          
        : Variable                                              { $$ = $1; }
        | Constant                                              { $$ = $1; }
        | LPAR Expression RPAR                                  { $$ = $2; }
        | TupleElement                                          { $$ = $1; }
Variable                
        : LOWER_ID                                              { $$ = leaf("LOWER_ID", yytext); }
Constant                
        : INTEGER                                               { $$ = leaf("INTEGER", yytext); }
        | REAL                                                  { $$ = leaf("REAL", yytext); }
String
        : STRING                                                { $$ = leaf("STRING", yytext); }
%%              
#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
